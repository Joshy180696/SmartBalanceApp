@* @page "/register"
@layout AuthLayout
@using SmartBalanceBlazor.ViewModels
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService

<PageTitle>Register</PageTitle>

<div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
    <RadzenCard Style="width: 100%; max-width: 350px; padding: 24px; border-radius: 15px; background: white; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="12px">
            <!-- Header -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                <RadzenIcon Icon="person_add" Style="font-size: 24px; color: #3f51b5;" />
                <RadzenLabel Text="Create Account" Style="font-size: 20px; font-weight: 600; color: #3f51b5;" />
            </RadzenStack>

            <!-- Form -->
            <EditForm Model="model" OnValidSubmit="RegisterUser" Style="width: 100%;">
                <DataAnnotationsValidator />

                <RadzenTextBox @bind-Value="model.UserName" Name="UserName" Placeholder="Username" Style="margin-bottom: 12px; width: 100%;"
                               Icon="person" />
                <ValidationMessage For="@(() => model.UserName)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.Email" Name="Email" Placeholder="Email" Type="email" Style="margin-bottom: 12px; width: 100%;"
                               Icon="email" />
                <ValidationMessage For="@(() => model.Email)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.Password" Name="Password" Placeholder="Password" Type="password" Style="margin-bottom: 12px; width: 100%;"
                               Icon="lock" />
                <ValidationMessage For="@(() => model.Password)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenNumeric @bind-Value="model.MonthlyIncome" Name="MonthlyIncome" Placeholder="Monthly Income" Min="0" Style="margin-bottom: 12px; width: 100;"
                                     Icon="attach_money" />
                <ValidationMessage For="@(() => model.MonthlyIncome)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.FirstName" Name="FirstName" Placeholder="First Name" Style="margin-bottom: 12px; width: 100%;"
                               Icon="badge" />
                <ValidationMessage For="@(() => model.FirstName)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.LastName" Name="LastName" Placeholder="Last Name" Style="margin-bottom: 12px; width: 100%;"
                               Icon="badge" />
                <ValidationMessage For="@(() => model.LastName)" Style="margin-bottom: 8px; color: #d32f2f;" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <RadzenLabel Text="@errorMessage" Style="color: #d32f2f; margin-bottom: 12px; text-align: center;" />
                }

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Disabled="@isLoading" Style="width: 100%; border-radius: 25px; background-color: #3f51b5; color: white; padding: 10px; text-transform: uppercase; font-weight: 600;">
                    @if (isLoading)
                    {
                        <RadzenProgressCircle Value="100" ShowValue="false" Style="width: 20px; height: 20px; margin-right: 8px; display: inline-block; vertical-align: middle;" ProgressStyle="ProgressCircleStyle.Light" />
                        <span style="vertical-align: middle;">Registering...</span>
                    }
                    else
                    {
                        <span style="vertical-align: middle;">Register</span>
                    }
                </RadzenButton>
            </EditForm>

            <!-- Footer -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="4px">
                <RadzenLabel Text="Already have an account?" Style="font-size: 14px;" />
                <RadzenLink Path="/login" Text="Login" Style="font-size: 14px; color: #3f51b5;" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
    </div>


@code {
    private AuthViewModels.RegisterModel model = new();
    private string errorMessage = string.Empty;
    private List<string> validationErrors = new();
    private bool isLoading = false;
    private bool buttonHovered = false;

    private async Task RegisterUser()
    {
        errorMessage = string.Empty;
        isLoading = true; // Start loading
        StateHasChanged(); // Update UI to show spinner

        var httpClient = HttpClientFactory.CreateClient("SmartBalanceApi");
        try
        {
            // var response = await httpClient.PostAsJsonAsync("https://smartbalanceapi.onrender.com/api/Authentication/register", model);
            var response = await httpClient.PostAsJsonAsync("http://localhost:5048/api/Authentication/register", model);
            var rawResponse = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AuthViewModels.RegisterResponseModel>();
                // Show notification using Radzen's NotificationService
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "User created, you can now login!",
                    Duration = 4000
                });
                // Navigate to login page
                Navigation.NavigateTo("/login");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var error = await response.Content.ReadFromJsonAsync<AuthViewModels.RegisterErrorResponseModel>();
                errorMessage = error?.Message ?? "Registration failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
        finally
        {
            isLoading = false; // Stop loading
            StateHasChanged(); // Update UI to hide spinner
        }
    }
} *@

@page "/register"
@layout AuthLayout
@using SmartBalanceBlazor.ViewModels
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService

<PageTitle>Register</PageTitle>

<div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
    <RadzenCard Style="width: 100%; max-width: 350px; padding: 24px; border-radius: 15px; background: white; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="12px">
            <!-- Header -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                <RadzenIcon Icon="person_add" Style="font-size: 24px; color: #3f51b5;" />
                <RadzenLabel Text="Create Account" Style="font-size: 20px; font-weight: 600; color: #3f51b5;" />
            </RadzenStack>

            <!-- Form -->
            <EditForm Model="model" OnValidSubmit="RegisterUser" Style="width: 100%;">
                <DataAnnotationsValidator />

                <RadzenTextBox @bind-Value="model.UserName" Name="UserName" Placeholder="Username" Style="margin-bottom: 12px; width: 100%;"
                               Icon="person" />
                <ValidationMessage For="@(() => model.UserName)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.Email" Name="Email" Placeholder="Email" Type="email" Style="margin-bottom: 12px; width: 100%;"
                               Icon="email" />
                <ValidationMessage For="@(() => model.Email)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.Password" Name="Password" Placeholder="Password" Type="password" Style="margin-bottom: 12px; width: 100%;"
                               Icon="lock" />
                <ValidationMessage For="@(() => model.Password)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenNumeric @bind-Value="model.MonthlyIncome" Name="MonthlyIncome" Placeholder="Monthly Income" Min="0" Style="margin-bottom: 12px; width: 100;"
                                     Icon="attach_money" />
                <ValidationMessage For="@(() => model.MonthlyIncome)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.FirstName" Name="FirstName" Placeholder="First Name" Style="margin-bottom: 12px; width: 100%;"
                               Icon="badge" />
                <ValidationMessage For="@(() => model.FirstName)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.LastName" Name="LastName" Placeholder="Last Name" Style="margin-bottom: 12px; width: 100%;"
                               Icon="badge" />
                <ValidationMessage For="@(() => model.LastName)" Style="margin-bottom: 8px; color: #d32f2f;" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <RadzenLabel Text="@errorMessage" Style="color: #d32f2f; margin-bottom: 12px; text-align: center;" />
                }

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Disabled="@isLoading" Style="width: 100%; border-radius: 25px; background-color: #3f51b5; color: white; padding: 10px; text-transform: uppercase; font-weight: 600;">
                    @if (isLoading)
                    {
                        <RadzenProgressCircle Value="100" ShowValue="false" Style="width: 20px; height: 20px; margin-right: 8px; display: inline-block; vertical-align: middle;" ProgressStyle="ProgressCircleStyle.Light" />
                        <span style="vertical-align: middle;">Registering...</span>
                    }
                    else
                    {
                        <span style="vertical-align: middle;">Register</span>
                    }
                </RadzenButton>
            </EditForm>

            <!-- Footer -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="4px">
                <RadzenLabel Text="Already have an account?" Style="font-size: 14px;" />
                <RadzenLink Path="/login" Text="Login" Style="font-size: 14px; color: #3f51b5;" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    private AuthViewModels.RegisterModel model = new();
    private string errorMessage = string.Empty;
    private List<string> validationErrors = new();
    private bool isLoading = false;
    private bool buttonHovered = false;

    private async Task RegisterUser()
    {
        errorMessage = string.Empty;
        isLoading = true; // Start loading
        StateHasChanged(); // Update UI to show spinner

        var httpClient = HttpClientFactory.CreateClient("SmartBalanceApi");
        try
        {
            var response = await httpClient.PostAsJsonAsync("http://localhost:5048/api/Authentication/register", model);
            var rawResponse = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AuthViewModels.RegisterResponseModel>();
                // Show success notification
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Registration Successful!",
                    Detail = "Your account has been created. Redirecting to login...",
                    Duration = 3000, // Show for 3 seconds
                    Style = "background-color: #4caf50; color: white; border-radius: 5px; padding: 10px;" // Green success style
                });
                // Delay navigation to let the user see the notification
                await Task.Delay(3500); // Wait 3.5 seconds (slightly more than Duration)
                Navigation.NavigateTo("/login");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var error = await response.Content.ReadFromJsonAsync<AuthViewModels.RegisterErrorResponseModel>();
                errorMessage = error?.Message ?? "Registration failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
        finally
        {
            isLoading = false; // Stop loading
            StateHasChanged(); // Update UI to hide spinner
        }
    }
}