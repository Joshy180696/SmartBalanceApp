@page "/login"
@layout AuthLayout
@using SmartBalanceBlazor.Auth
@using SmartBalanceBlazor.ViewModels
@using static SmartBalanceBlazor.ViewModels.AuthViewModels
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject JwtAuthenticationStateProvider AuthProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<div style="display: flex; justify-content: center; align-items: center; height: 100vh;">

    <RadzenCard Style="width: 100%; max-width: 350px; padding: 24px; border-radius: 15px; background: white; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="12px">

            <!-- Demo Login Button -->
            <RadzenButton Click="@LoginWithDemo" Text="Login with Demo User" Style="width: 100%; margin-bottom: 12px; background-color: #4caf50; color: white; padding: 10px; border-radius: 25px; font-weight: 600;" />
            <!-- Header -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                <RadzenIcon Icon="lock" Style="font-size: 24px; color: #3f51b5;" />
                <RadzenLabel Text="Welcome Back" Style="font-size: 20px; font-weight: 600; color: #3f51b5;" />
            </RadzenStack>

            <!-- Form -->
            <EditForm Model="model" OnValidSubmit="LoginUser" Style="width: 100%;">
                <DataAnnotationsValidator />

                <RadzenTextBox @bind-Value="model.UserName" Name="UserName" Placeholder="Username" Style="margin-bottom: 12px; width: 100%;"
                               Icon="person" Change="@(args => { })" />
                <ValidationMessage For="@(() => model.UserName)" Style="margin-bottom: 8px; color: #d32f2f;" />

                <RadzenTextBox @bind-Value="model.Password" Name="Password" Placeholder="Password" Type="password" Style="margin-bottom: 12px; width: 100%;"
                               Icon="lock" Change="@(args => { })" />
                <ValidationMessage For="@(() => model.Password)" Style="margin-bottom: 8px; color: #d32f2f;" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <RadzenLabel Text="@errorMessage" Style="color: #d32f2f; margin-bottom: 12px; text-align: center;" />
                }

                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Disabled="@isLoading" Style="width: 100%; border-radius: 25px; background-color: #3f51b5; color: white; padding: 10px; text-transform: uppercase; font-weight: 600;">
                    @if (isLoading)
                    {
                        <RadzenProgressCircle Value="100" ShowValue="false" Style="width: 20px; height: 20px; margin-right: 8px; display: inline-block; vertical-align: middle;" ProgressStyle="ProgressCircleStyle.Light" />
                        <span style="vertical-align: middle;">Logging in...</span>
                    }
                    else
                    {
                        <span style="vertical-align: middle;">Login</span>
                    }
                </RadzenButton>
            </EditForm>

            <!-- Footer -->
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="4px">
                <RadzenLabel Text="Don't have an account?" Style="font-size: 14px;" />
                <RadzenLink Path="/register" Text="Register" Style="font-size: 14px; color: #3f51b5;" />
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
    </div>



@code {
    private LoginModel model = new();
    private string errorMessage = string.Empty;
    private bool buttonHovered = false;
    private bool isLoading = false;


    private async Task LoginWithDemo()
    {
        // Pre-fill with demo credentials
        model.UserName = "UserDemo";
        model.Password = "UserDemo2025";

        // Trigger the login process
        await LoginUser();
    }

    private async Task LoginUser()
    {
        errorMessage = string.Empty;
        isLoading = true; // Start loading
        StateHasChanged(); // Update UI to show spinner

        var httpClient = HttpClientFactory.CreateClient("SmartBalanceApi");
        try
        {
            var response = await httpClient.PostAsJsonAsync("https://smartbalanceapi.onrender.com/api/Authentication/login", model);
            // var response = await httpClient.PostAsJsonAsync("http://localhost:5048/api/Authentication/login", model);
            var rawResponse = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponseModel>();
                await LocalStorage.SetItemAsync("refreshToken", result.RefreshToken);
                await AuthProvider.LoginAsync(result.AccessToken);
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<LoginErrorResponseModel>();
                errorMessage = error?.Message ?? "Login failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
        finally
        {
            isLoading = false; // Stop loading
            StateHasChanged(); // Update UI to hide spinner
        }
    }
}